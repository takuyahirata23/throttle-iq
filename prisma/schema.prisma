// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  motorcycles   Motorcycle[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Country {
  id     String  @id @default(uuid())
  name   String
  code   String
  tracks Track[]
}

model Track {
  id           String        @id @default(uuid())
  name         String
  isMotoGP     Boolean       @default(false)
  trackLayouts TrackLayout[]

  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId String
}

model TrackLayout {
  id     String @id @default(uuid())
  name   String
  length Float

  track   Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId String
}

model Make {
  id     String  @id @default(uuid())
  name   String
  models Model[]
}

model Model {
  id   String @id @default(uuid())
  name String

  track  Make   @relation(fields: [makeId], references: [id], onDelete: Cascade)
  makeId String

  Motorcycle Motorcycle[]
}

model Motorcycle {
  id   String @id @default(uuid())
  year Int

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  modelId String
  model   Model  @relation(fields: [modelId], references: [id], onDelete: Cascade)
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
